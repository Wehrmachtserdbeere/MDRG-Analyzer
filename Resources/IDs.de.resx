<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="data_botname" xml:space="preserve">
    <value>Bot Name</value>
  </data>
  <data name="data_casinotokens" xml:space="preserve">
    <value>Kasinotoken</value>
  </data>
  <data name="data_cuminside" xml:space="preserve">
    <value>Samen innen (ml)</value>
  </data>
  <data name="data_cuminsideanal" xml:space="preserve">
    <value>Samen in Hintern (ml)</value>
  </data>
  <data name="data_cuminsidestomach" xml:space="preserve">
    <value>Samen in Magen (ml)</value>
  </data>
  <data name="data_currenthorniness" xml:space="preserve">
    <value>Derzeitige Geilheit</value>
  </data>
  <data name="data_deathgripend" xml:space="preserve">
    <value>Deathgrip Ende</value>
  </data>
  <data name="data_followers" xml:space="preserve">
    <value>Follower</value>
  </data>
  <data name="data_gameversion" xml:space="preserve">
    <value>Spielversion (vom Speicherstand)</value>
  </data>
  <data name="data_health" xml:space="preserve">
    <value>Gesundheit</value>
  </data>
  <data name="data_ingametime" xml:space="preserve">
    <value>In-Spiel-Zeit</value>
  </data>
  <data name="data_inteligence" xml:space="preserve">
    <value>Intelligenz</value>
  </data>
  <data name="data_lastbottalkat" xml:space="preserve">
    <value>Zuletzt geredet</value>
  </data>
  <data name="data_lastcuddledat" xml:space="preserve">
    <value>Zuletzt gekuschelt</value>
  </data>
  <data name="data_lastequipmentat" xml:space="preserve">
    <value>Zuletzt Equipment gewechselt</value>
  </data>
  <data name="data_lastfuckedat" xml:space="preserve">
    <value>Zuletzt gefickt</value>
  </data>
  <data name="data_lastheadpatat" xml:space="preserve">
    <value>Zuletzt den Kopf gestreichelt</value>
  </data>
  <data name="data_lasthungerinfoat" xml:space="preserve">
    <value>Zuletzt Hungerinfo abgerufen</value>
  </data>
  <data name="data_lastinteractat" xml:space="preserve">
    <value>Zuletzt interagiert</value>
  </data>
  <data name="data_lastmentalhealthinfoat" xml:space="preserve">
    <value>Zuletzt geistige Gesundheit abgerufen</value>
  </data>
  <data name="data_lastoutsidewithbot" xml:space="preserve">
    <value>Zuletzt mit Bot draußen</value>
  </data>
  <data name="data_laststreamedat" xml:space="preserve">
    <value>Zuletzt gestreamt</value>
  </data>
  <data name="data_lastwenttochurchat" xml:space="preserve">
    <value>Zuletzt zur Kirche gegangen</value>
  </data>
  <data name="data_lastwokeupat" xml:space="preserve">
    <value>Zuletzt aufgewacht</value>
  </data>
  <data name="data_lastworkedatday" xml:space="preserve">
    <value>Zuletzt gearbeitet an Tag</value>
  </data>
  <data name="data_longeststream" xml:space="preserve">
    <value>Längster Stream</value>
  </data>
  <data name="data_longing" xml:space="preserve">
    <value>Sehnsucht</value>
  </data>
  <data name="data_lust" xml:space="preserve">
    <value>Verlangen</value>
  </data>
  <data name="data_maxcum" xml:space="preserve">
    <value>Max Samen</value>
  </data>
  <data name="data_mentalhealth" xml:space="preserve">
    <value>Geistige Gesundheit</value>
  </data>
  <data name="data_mlcameinmouth" xml:space="preserve">
    <value>In Mund gekommen (ml)</value>
  </data>
  <data name="data_mlofcumwasted" xml:space="preserve">
    <value>Samen verschwendet</value>
  </data>
  <data name="data_money" xml:space="preserve">
    <value>Geld</value>
  </data>
  <data name="data_moneyearnedfromstreams" xml:space="preserve">
    <value>Geld durch Streams verdient</value>
  </data>
  <data name="data_mood" xml:space="preserve">
    <value>Laune</value>
  </data>
  <data name="data_notes" xml:space="preserve">
    <value>Notizen</value>
  </data>
  <data name="data_nunpoints" xml:space="preserve">
    <value>Nonnenpunkte</value>
  </data>
  <data name="data_playername" xml:space="preserve">
    <value>Spielernamen</value>
  </data>
  <data name="data_priestbotpoints" xml:space="preserve">
    <value>Predigerbot-Punkte</value>
  </data>
  <data name="data_remainingcum" xml:space="preserve">
    <value>Übrige Samen</value>
  </data>
  <data name="data_rent" xml:space="preserve">
    <value>Miete</value>
  </data>
  <data name="data_satiation" xml:space="preserve">
    <value>Sättigung</value>
  </data>
  <data name="data_search" xml:space="preserve">
    <value>Suche</value>
  </data>
  <data name="data_stage" xml:space="preserve">
    <value>Spielphase</value>
  </data>
  <data name="data_stamina" xml:space="preserve">
    <value>Ausdauer</value>
  </data>
  <data name="data_streamcount" xml:space="preserve">
    <value>Anzahl Streams</value>
  </data>
  <data name="data_streamedfor" xml:space="preserve">
    <value>Gestreamt für</value>
  </data>
  <data name="data_subs" xml:space="preserve">
    <value>Abonnenten</value>
  </data>
  <data name="data_sympathy" xml:space="preserve">
    <value>Sympathie</value>
  </data>
  <data name="data_timescameinside" xml:space="preserve">
    <value>Male innen gekommen</value>
  </data>
  <data name="data_timescameoutside" xml:space="preserve">
    <value>Male draußen gekommen</value>
  </data>
  <data name="data_timeslostchess" xml:space="preserve">
    <value>Schach verloren</value>
  </data>
  <data name="data_timeslostoldmaid" xml:space="preserve">
    <value>Old Maid verloren</value>
  </data>
  <data name="data_timeslostwordchain" xml:space="preserve">
    <value>Wörterkette verloren</value>
  </data>
  <data name="data_timesranawayoldmaid" xml:space="preserve">
    <value>Old Maid weggerannt</value>
  </data>
  <data name="data_timeswenttochurch" xml:space="preserve">
    <value>Anzal Kirchgänge</value>
  </data>
  <data name="data_timeswonchess" xml:space="preserve">
    <value>Schach gewonnen</value>
  </data>
  <data name="data_timeswonoldmaid" xml:space="preserve">
    <value>Old Maid gewonnen</value>
  </data>
  <data name="data_timeswonwordchain" xml:space="preserve">
    <value>Wörterkette gewonnen</value>
  </data>
  <data name="data_uniqueconversationsleft" xml:space="preserve">
    <value>Einzigartige Gespräche übrig</value>
  </data>
  <data name="data_vinegaraend" xml:space="preserve">
    <value>Vinegara Ende</value>
  </data>
  <data name="data_weeklyrent" xml:space="preserve">
    <value>Wöchentliche Miete</value>
  </data>
</root>